{% html "head" %}
<link rel="preconnect" href="https://cdn.maptiler.com/" crossorigin />
<link rel="dns-prefetch" href="https://cdn.maptiler.com/" />
<link href="https://cdn.maptiler.com/maptiler-sdk-js/latest/maptiler-sdk.css" rel="stylesheet" media="print" onload="this.media='all'" />
<noscript>
  <link rel="stylesheet" href="https://cdn.maptiler.com/maptiler-sdk-js/latest/maptiler-sdk.css">
</noscript>
{% endhtml %}

{% html "footer" %}
<script src="https://cdn.maptiler.com/maptiler-sdk-js/latest/maptiler-sdk.umd.min.js" defer onload="drawMap()"></script>
{% endhtml %}

<style>
{% css %}
  #map-site {
    width: 100%;
    height: 25rem;
    border-radius: 0.5rem;
    background-color: var(--secondary);
  }
{% endcss %}

{% css "defer" %}
  .maplibregl-ctrl-bottom-left a[aria-label="Mapbox logo"] {
    display: none !important;
  }

  /*layerSwitcherControl*/
  .maplibregl-ctrl-basemaps {
    display: flex;
    flex-direction: row;
    pointer-events: auto;
    position: relative;

    &.reverse {
      flex-direction: row-reverse;
    }

    &.column {
      flex-direction: column;

      &.reverse {
        flex-direction: column-reverse;
      }
    }

    & .basemap {
      width: 32px;
      height: 32px;
      margin: 2px;
      border: 2px solid #ccc;
      box-shadow: 0 1px 5px rgba(0, 0, 0, 0.65);
      cursor: pointer;

      &.active {
        border-color: orange;
        box-shadow: 2px 2px 4px #000;
      }
    }
    &.closed .basemap {
      display: none;

      &.active {
        display: block;
        border: 2px solid #ccc;
      }
    }
  }
{% endcss %}
</style>

<div id="map-site"></div>

<script>
  {% js %}
  const isTouchDevice = () => (('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0));
  var drawMap = () => {
    // Parse the takeoffs from the json string and adjust the data
    const takeoffs = {{ takeoffs | adjustCoordinates | safe }};
    const landings = {{ landings | adjustCoordinates | safe }};
    // Create initial bounds
    const bounds = new maptilersdk.LngLatBounds();
    [...takeoffs, ...landings].map(location => bounds.extend(location));

    maptilersdk.config.apiKey = 'Rbbu3nsbqSZW7WjHyQEk';

    const baseMaps = {
      "OUTDOOR": {
        img: "https://cloud.maptiler.com/static/img/maps/outdoor.png"
      },
      "TOPO": {
        img: "https://cloud.maptiler.com/static/img/maps/topo.png"
      },
      "HYBRID": {
        img: "https://cloud.maptiler.com/static/img/maps/hybrid.png"
      }
    };
    const initialStyle = maptilersdk.MapStyle[Object.keys(baseMaps)[0]];

    const map = new maptilersdk.Map({
      container: 'map-site',
      style: initialStyle, //'bad49809-c61a-41fe-a212-9b1f58c1a8f8' or "topo" or "topo-v2"
      center: takeoffs[0],
      zoom: 13,
      minZoom: 9,
      bounds: bounds, // resets zoom and center
      fitBoundsOptions: { padding: 40 },
      geolocateControl: false,
      fullscreenControl: true,
      scaleControl: "bottom-left",
      terrain: true,
      terrainControl: true,
      terrainExaggeration: 1.5,
      pitch: 35,
      maxPitch: 70,
      scrollZoom: false,
      cooperativeGestures: isTouchDevice(),
      maptilerLogo: false,
      attributionControl: false,
      crossSourceCollisions: false,
    });

    {#// FIXME: move attribution control to bottom left
      // https://github.com/maptiler/maplibre-gl-js-samples/blob/main/control-minimap/code.html
      map.addControl(new maptilersdk.AttributionControl({ compact: true}), 'bottom-left');
      // TODO: enable/disable scroll when map is in Fullscreen mode
      map.scrollZoom.enable();
    #}

    // Add the markers while setting the bounds
    let takeoffCounter = landingCounter = 0;
    [...takeoffs, ...landings].map((location, i) => {
      const isTakeoff = i < takeoffs.length;
      const markerColor = isTakeoff ? 'var(--blue)' : 'var(--green)';
      const markerType = isTakeoff ? 'ðŸª‚ Decollo' : 'ðŸŽ¯ Atterraggio';
      let num = '';

      if (isTakeoff) {
        takeoffCounter++;
        num = takeoffCounter > 1 ? takeoffCounter : '';
      } else {
        landingCounter++;
        num = landingCounter > 1 ? landingCounter : '';
      }

      const marker = new maptilersdk.Marker({ color: markerColor }).setLngLat(location).addTo(map);

      const popup = new maptilersdk.Popup({ closeButton: true })
        .setHTML(`
          <h3>${markerType} ${num}</h3>
          <p><a href="https://maps.google.com/maps?q=${location[1]},${location[0]}" target="_blank">Naviga qui</a></p>
        `);
      marker.setPopup(popup);
    });

    // Create the layer switcher control
    class layerSwitcherControl {

      constructor(options) {
        this._options = {...options};
        this._container = document.createElement("div");
        this._container.classList.add("maplibregl-ctrl");
        this._container.classList.add("maplibregl-ctrl-basemaps");
        this._container.classList.add("closed");
        switch (this._options.expandDirection || "right") {
          case "top":
            this._container.classList.add("reverse");
          case "down":
            this._container.classList.add("column");
            break;
          case "left":
            this._container.classList.add("reverse");
          case "right":
            this._container.classList.add("row");
        }
        this._container.addEventListener("mouseenter", () => {
          this._container.classList.remove("closed");
        });
        this._container.addEventListener("mouseleave", () => {
          this._container.classList.add("closed");
        });
      }

      onAdd(map) {
        this._map = map;
        const basemaps = this._options.basemaps;
        Object.keys(basemaps).forEach((layerId) => {
          const base = basemaps[layerId];
          const basemapContainer = document.createElement("img");
          basemapContainer.src = base.img;
          basemapContainer.classList.add("basemap");
          basemapContainer.dataset.id = layerId;
          basemapContainer.addEventListener("click", () => {
            const activeElement = this._container.querySelector(".active");
            activeElement.classList.remove("active");
            basemapContainer.classList.add("active");
            map.setStyle(maptilersdk.MapStyle[layerId]);
            // Fixes "Unable to perform style diff [...]"
            (layerId === 'HYBRID') && map.hasTerrain() && map.enableTerrain();
          });
          basemapContainer.classList.add("hidden");
          this._container.appendChild(basemapContainer);
          if (this._options.initialBasemap.id === layerId) {
              basemapContainer.classList.add("active");
          }
        });
        return this._container;
      }

      onRemove(){
        this._container.parentNode?.removeChild(this._container);
        delete this._map;
      }
    }

    map.addControl(new layerSwitcherControl({basemaps: baseMaps, initialBasemap: initialStyle}), 'top-left');
  }
  {% endjs %}
</script>
